{"version":3,"file":"static/js/736.c7087b7f.chunk.js","mappings":"yPAEaA,EAASC,EAAAA,EAAAA,GAAH,yGAMNC,EAASD,EAAAA,EAAAA,GAAH,sFAGb,IAEOE,EAAWF,EAAAA,EAAAA,EAAH,sG,SCgCrB,MArCA,WACI,IAAQG,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAKA,OAJAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,WAAAC,EAAAA,EAAAA,GAAgBN,UAAhB,SAAqBO,KAAKH,EAC7B,GAAE,CAACJ,IAGA,CAAEG,MAAAA,KACE,0BACI,SAACP,EAAD,UACuB,KAAb,OAALO,QAAK,IAALA,OAAA,EAAAA,EAAOK,SACJ,uBAAG,4CADN,OAGGL,QAHH,IAGGA,OAHH,EAGGA,EAAOM,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACzC,OACI,UAACf,EAAD,CAAQgB,UAAU,aAAlB,WACI,UAACf,EAAD,WAAU,cAAYa,GAAa,WACnC,UAACb,EAAD,WAAU,SAAOY,GAAQ,WACzB,gBAAKI,MAAO,IAAKC,OAAQ,IAAKC,IAAKP,EAAY,0CAAsCA,GAAiB,0JAA2JQ,IAAKP,KACtQ,oBAJgCE,EAO3C,OAMxB,C,kMClCYM,EAAO,kBCIb,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACoBC,EAAAA,EAAAA,GAAM,oBAD1B,cACGC,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BzB,GAA/B,wFACoBqB,EAAAA,EAAAA,GAAM,SAAD,OAAUrB,GAAM,CACxC0B,OACA,CACIC,SAAUR,EACVS,KAAM,KALX,cACGN,EADH,yBAQIA,EAASC,MARb,kEAWA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,wFACoBqB,EAAAA,EAAAA,GAAM,SAAD,OACfrB,EADe,YACD,CACvB0B,OACA,CACIC,SAAUR,KALf,cACGG,EADH,yBASIA,EAASC,KAAKM,MATlB,kEAYA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8B9B,GAA9B,wFACoBqB,EAAAA,EAAAA,GAAM,SAAD,OACfrB,EADe,YACD,CACvB0B,OACA,CACIC,SAAUR,EACVS,KAAM,KANX,cACGN,EADH,yBAUIA,EAASC,KAAKC,SAVlB,kEAaA,SAAeO,EAAtB,kC,aAAO,O,oBAAA,WAAyBC,GAAzB,wFACoBX,EAAAA,EAAAA,GAAM,iBACP,CAClBK,OACA,CACIO,MAAOD,EACPJ,KAAM,KANX,cACGN,EADH,yBAUIA,EAASC,KAAKC,SAVlB,kEA5CPH,EAAAA,EAAAA,SAAAA,QDFwB,gCCGxBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAA,iBDJqB,sN","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/services/constans.js","components/services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastUl = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    list-style: none;\n    gap: 40px;\n`;\nexport const CastLi = styled.li`\n    margin-bottom: 20px;\n    word-wrap: break-word;\n    ${'' /* width: calc((100% - 4 * 30px) / 5); */}\n`;\nexport const CastText = styled.p`\n    text-align: center;\n    align-items: center; \n    word-wrap: break-word;`;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { getCreditsMovie } from 'components/services/api';\nimport { CastLi, CastText, CastUl } from './Cast.styled';\n\nfunction Cast() {\n    const { id } = useParams();\n    const [casts, setCasts] = useState(null);\n    useEffect(() => {\n        getCreditsMovie(id)?.then(setCasts);\n    }, [id]);\n\n    return (\n        { casts } && (\n            <div>\n                <CastUl>\n                    {casts?.length === 0 ? (\n                        <p>We don't have any casts for this movies</p>\n                    ) : (\n                        casts?.map(({ profile_path, name, character, cast_id }) => {\n                            return (\n                                <CastLi className=\"thumb-cast\" key={cast_id}>\n                                    <CastText>Character: {character || 'none'}</CastText>\n                                    <CastText>Name: {name || 'none'}</CastText>\n                                    <img width={200} height={300} src={profile_path ? `https://image.tmdb.org/t/p/w500/${profile_path}` : 'https://media.istockphoto.com/id/1147544807/vector/thumbnail-image-vector-graphic.jpg?s=612x612&w=0&k=20&c=rnCKVbdxqkjlcs3xH87-9gocETqpspHFXu5dIGB4wuM='} alt={name} />\n                                    <br />\n                                </CastLi>\n                            )\n                        })\n                    )}\n                </CastUl>\n            </div>\n        )\n    );\n}\n\nCast.propTypes = {\n    width: PropTypes.number,\n    url: PropTypes.string,\n    name: PropTypes.string,\n};\n\nexport default Cast;","export const API_KEY = \"6f49739e10a57a9bf024e4cbda7bdd20\";\nexport const TOKEN = \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2ZjQ5NzM5ZTEwYTU3YTliZjAyNGU0Y2JkYTdiZGQyMCIsInN1YiI6IjY0NmNhNDFkMzNhMzc2MDExZWM1NzZiYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.l7wd1ErHz9MLKun2tiW2sFEdmte5xSXYfQzmnx_8WvI\"\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const LANG = '&language=en-US';","import axios from 'axios';\nimport { BASE_URL, LANG, TOKEN } from './constans';\n\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.headers.common['Authorization'] = `Bearer ${TOKEN}`;\n\nexport async function getTrendsMovies() {\n    const response = await axios(`trending/all/day`);\n    return response.data.results;\n}\n\nexport async function getDetailsMovie(id) {\n    const response = await axios(`movie/${id}`, {\n        params:\n        {\n            language: LANG,\n            page: 1,\n        }\n    });\n    return response.data;\n}\n\nexport async function getCreditsMovie(id) {\n    const response = await axios(\n        `movie/${id}/credits`, {\n        params:\n        {\n            language: LANG,\n        }\n    }\n    );\n    return response.data.cast;\n}\n\nexport async function getReviewMovie(id) {\n    const response = await axios(\n        `movie/${id}/reviews`, {\n        params:\n        {\n            language: LANG,\n            page: 1,\n        }\n    }\n    );\n    return response.data.results;\n}\n\nexport async function getMovies(q) {\n    const response = await axios(\n        `search/keyword`, {\n        params:\n        {\n            query: q,\n            page: 1,\n        }\n    }\n    );\n    return response.data.results;\n}\n// -url 'https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1'\n// 'https://api.themoviedb.org/3/search/keyword?query=batman&page=1"],"names":["CastUl","styled","CastLi","CastText","id","useParams","useState","casts","setCasts","useEffect","getCreditsMovie","then","length","map","profile_path","name","character","cast_id","className","width","height","src","alt","LANG","getTrendsMovies","axios","response","data","results","getDetailsMovie","params","language","page","cast","getReviewMovie","getMovies","q","query"],"sourceRoot":""}